{"version":3,"sources":["components/Registration/Registration.js","components/Registration/RegistrationContainer.js"],"names":["minLength3","minLength","minLength8","RegistrationReduxForm","reduxForm","form","props","Form","className","onSubmit","handleSubmit","FormGroup","Label","Field","validate","required","placeholder","name","component","Input","type","Control","Feedback","registrationError","Button","Registration","useState","newUserName","setNewUserName","newUserEmail","setNewUserEmail","registerValidate","to","pathname","state","email","Container","fluid","values","password","setNewUser","connect","auth","setNewUserData","setRegistrationError","then","response"],"mappings":"uQASMA,G,OAAaC,YAAU,IACvBC,EAAaD,YAAU,GAqDvBE,EAAwBC,YAAU,CAAEC,KAAM,gBAAlBD,EAzBL,SAACE,GACxB,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,aAAaC,SAAUH,EAAMI,cAC3C,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAKK,MAAN,eACA,kBAACC,EAAA,EAAD,CAAOC,SAAU,CAACC,IAAUf,GAAagB,YAAY,OAAOC,KAAK,OAAOC,UAAWC,OAErF,kBAACR,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAKK,MAAN,gBACA,kBAACC,EAAA,EAAD,CAAOC,SAAU,CAACC,KAAWC,YAAY,QAAQC,KAAK,QAAQC,UAAWC,OAE3E,kBAACR,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAKK,MAAN,mBACA,kBAACC,EAAA,EAAD,CAAOC,SAAU,CAACC,IAAUb,GAAac,YAAY,WAAWC,KAAK,WAAWC,UAAWC,IAAOC,KAAK,cAEzG,kBAACT,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAKc,QAAQC,SAAd,CAAuBd,UAAU,0BAA0BY,KAAK,WACvDd,EAAMiB,oBAGjB,kBAACC,EAAA,EAAD,CAAQhB,UAAU,YAAYY,KAAK,UAAnC,gBAOSK,EAtDM,SAACnB,GAAW,IAAD,EAEMoB,mBAAS,IAFf,mBAEzBC,EAFyB,KAEZC,EAFY,OAGQF,mBAAS,IAHjB,mBAGzBG,EAHyB,KAGXC,EAHW,KAW9B,OAAIxB,EAAMyB,iBAAyB,kBAAC,IAAD,CAAUC,GAAI,CAC/CC,SAAU,wBACVC,MAAO,CACLjB,KAAMU,EACNQ,MAAON,MAKT,kBAACO,EAAA,EAAD,CAAWC,OAAK,EAAC7B,UAAU,SACzB,4BAAQA,UAAU,gBAAlB,gBACA,kBAACL,EAAD,CAAuBM,SAjBV,SAAC6B,GAAY,IACpBrB,EAA0BqB,EAA1BrB,KAAMkB,EAAoBG,EAApBH,MAAOI,EAAaD,EAAbC,SACrBX,EAAeX,GACfa,EAAgBK,GAChB7B,EAAMkC,WAAWvB,EAAMkB,EAAOI,IAaiBhB,kBAAmBjB,EAAMiB,sBCb3DkB,uBAJK,SAACP,GAAD,MAAY,CAChCH,iBAAkBG,EAAMQ,KAAKX,oBAGW,CAACY,oBAA1BF,EAfc,SAACnC,GAAW,IAAD,EACUoB,mBAAS,IADnB,mBACjCH,EADiC,KACdqB,EADc,KAOtC,OACE,kBAAC,EAAD,iBAAkBtC,EAAlB,CAAyBkC,WANV,SAACvB,EAAMkB,EAAOI,GAC/BjC,EAAMqC,eAAe1B,EAAMkB,EAAOI,GAAUM,MAAK,SAAAC,GAAQ,OACvDF,EAAqBE,OAI4BvB,kBAAmBA","file":"static/js/4.5d83d081.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button, FormGroup, Container } from 'react-bootstrap';\nimport { reduxForm, Field } from 'redux-form';\nimport { Redirect } from 'react-router-dom';\nimport { required, minLength } from '../../utils/validators/validators';\nimport { Input } from '../common/FormControls/FormControls';\nimport './Registration.css'\n\n\nconst minLength3 = minLength(3)\nconst minLength8 = minLength(8)\nconst Registration = (props) => {\n\n  let [newUserName, setNewUserName] = useState('');\n  let [newUserEmail, setNewUserEmail] = useState('');\n\n  let setNewUser = (values) => {\n    const { name, email, password } = values\n    setNewUserName(name);\n    setNewUserEmail(email);\n    props.setNewUser(name, email, password)\n  }\n  if (props.registerValidate) return <Redirect to={{\n    pathname: \"/success-registration\",\n    state: {\n      name: newUserName,\n      email: newUserEmail\n    }\n  }}\n  />\n  return (\n    <Container fluid className=\"login\">\n      <header className=\"login-header\">Registration</header>\n      <RegistrationReduxForm onSubmit={setNewUser} registrationError={props.registrationError}/>\n    </Container>\n  )\n}\n\nconst RegistrationForm = (props) => {\n  return (\n    <Form className=\"login-form\" onSubmit={props.handleSubmit}>\n      <FormGroup>\n        <Form.Label>Name: </Form.Label>\n        <Field validate={[required, minLength3]} placeholder=\"Name\" name=\"name\" component={Input} />\n      </FormGroup>\n      <FormGroup>\n        <Form.Label>Email: </Form.Label>\n        <Field validate={[required]} placeholder=\"Email\" name=\"email\" component={Input} />\n      </FormGroup>\n      <FormGroup>\n        <Form.Label>Password: </Form.Label>\n        <Field validate={[required, minLength8]} placeholder=\"Password\" name=\"password\" component={Input} type=\"password\" />\n      </FormGroup>\n      <FormGroup>\n        <Form.Control.Feedback className=\"registration-form-error\" type=\"invalid\">\n                {props.registrationError}\n              </Form.Control.Feedback>\n        </FormGroup>\n      <Button className=\"login-btn\" type=\"submit\">Register</Button>\n    </Form>\n  )\n}\n\nconst RegistrationReduxForm = reduxForm({ form: 'registration' })(RegistrationForm);\n\nexport default Registration;","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { setNewUserData } from '../../redux/authReducer';\nimport Registration from './Registration';\n\n const RegistrationContainer = (props) => {\n  const [registrationError, setRegistrationError] = useState('')\n  const setNewUser = (name, email, password) => {\n    props.setNewUserData(name, email, password).then(response => \n      setRegistrationError(response)\n      )\n  }\n    return (\n      <Registration {...props} setNewUser={setNewUser} registrationError={registrationError}/>\n    )\n}\nlet mapStateToProps = (state) => ({\n  registerValidate: state.auth.registerValidate\n  \n} )\n  export default connect(mapStateToProps, {setNewUserData})(RegistrationContainer);"],"sourceRoot":""}